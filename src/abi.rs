// Generated by antelope-abi2rs 0.3.0 - eosio::abi/1.1

use serde::{Deserialize, Serialize};

type Name = String;
type TimePointSec = String;
type Uint64 = u64;
type Float32 = String;


macro_rules! impl_try_from_str {
    ($type:ty) => {
        impl TryFrom<&str> for $type {
            type Error = serde_json::Error;
            #[inline]
            fn try_from(str: &str) -> Result<Self, Self::Error> {
                serde_json::from_str(str)
            }
        }
    };
}


#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Deldevice {
    pub signature: String,
}
impl_try_from_str!(Deldevice);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct DevicesRow {
    pub device_id: Uint64,
    pub signature: String,
    pub r#type: Name,
    pub authority: Name,
    pub timestamp: Option<TimePointSec>,
    pub nonce: Uint64,
}
impl_try_from_str!(DevicesRow);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Location {
    pub transmitter: String,
    pub receiver: String,
    pub location: Vec<Float32>,
}
impl_try_from_str!(Location);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setdevice {
    pub signature: String,
    pub r#type: Name,
    pub authority: Name,
}
impl_try_from_str!(Setdevice);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Temperature {
    pub transmitter: String,
    pub receiver: String,
    pub temperature: Float32,
}
impl_try_from_str!(Temperature);

